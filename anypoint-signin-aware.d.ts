/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   anypoint-signin-aware.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../oauth-authorization/oauth2-authorization.d.ts" />

declare namespace AnypointElements {

  /**
   * `<anypoint-signin-aware>` is used to authenticate the user in Anypoint
   * core services API.
   *
   * The `anypoint-signin-aware-success` event is triggered when a user
   * successfully authenticates. It also sets `accessToken` property that can be
   * used to interact with Anypoint APIs.
   * The `anypoint-signin-aware-signed-out` event is triggered when a user
   * signs out via calling `signOut()` function.
   *
   * You can bind to `signedIn` property to monitor authorization state.
   * ##### Example
   *
   *     <anypoint-signin-aware signed-in="{{isSigned}}"></anypoint-signin-aware>
   *
   * The `clientId` and `redirectUri` properties has to be set before using the
   * component. `clientId` and associated with it `redirectUri` has to be set up
   * with Anypoint authorization server. Contact Anypoint Core services for
   * more information.
   *
   * ##### Example
   *
   *     <anypoint-signin-aware client-id="abc123" redirect-uri="https://auth.domain.com/oauth2/redirect"></anypoint-signin-aware>
   *
   * ## Authorization type
   *
   * This element supports `implicit` authentication flow only. Web application
   * should not contain OAuth2 secret and most OAuth2 authorization do not allow
   * web clients to authenticate from a web client. If you have to use `code`
   * authorization flow when use different method to authenticate the user.
   *
   * ## Autho log in
   *
   * The element attempts to log in user in a non-interactive way (without
   * displaying the popup) when the lement is ready. It does nothing when
   * the response is errored.
   */
  class AnypointSigninAware extends Polymer.Element {

    /**
     * An Anypoint clientId.
     * This property is required to run the authorization flow.
     */
    clientId: string|null|undefined;

    /**
     * Authorization redirect URI.
     * This property is required to run the authorization flow.
     */
    redirectUri: string|null|undefined;

    /**
     * True if user is signed in
     */
    readonly signedIn: boolean|null|undefined;

    /**
     * True if user is signed in
     */
    readonly accessToken: string|null|undefined;

    /**
     * User profile information.
     */
    readonly user: object|null|undefined;

    /**
     * By default this element inserts `oauth2-authorization` element to the
     * body and uses direct API to authorize the client. Set this property to
     * force the element to use events system to call the OAuth endpoint.
     *
     * It is useful when your application has it's own OAuth 2 authorization
     * mechanism.
     */
    forceOauthEvents: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * pops up the authorization dialog
     */
    signIn(): void;

    /**
     * Signs out the user and attempts to destroy the token.
     * Currently token destroy endpoint does not allow request from
     * different domains so this is dummy function that clears token info,
     * TODO: (jarrode) Discuss with core services to enable token revoke action
     * from the outside of domain.
     *
     * @returns Promise resolved when the token is revoked.
     */
    signOut(): Promise<any>|null;

    /**
     * Notifies application about error.
     *
     * @param error Error mesage
     */
    errorNotify(error: String|null): void;
    _clientIdChanged(newId: any): void;
    _redirectUriChanged(value: any): void;
    _updateStatus(): void;
  }
}

interface HTMLElementTagNameMap {
  "anypoint-signin-aware": AnypointElements.AnypointSigninAware;
}
